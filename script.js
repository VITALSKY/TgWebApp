// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp
if (!window.Telegram || !window.Telegram.WebApp) {
    document.body.innerHTML = '<p style="color:red;padding:20px;text-align:center">–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp</p>';
    throw new Error('Telegram WebApp API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
}

const tg = window.Telegram.WebApp;
tg.expand();

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const greeting = document.getElementById('greeting');
const sendBtn = document.getElementById('send-btn');
const responseDiv = document.getElementById('response') || document.createElement('div');
responseDiv.id = 'response';
document.body.appendChild(responseDiv);

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if (tg.initDataUnsafe?.user) {
    const user = tg.initDataUnsafe.user;
    greeting.innerHTML = `–ü—Ä–∏–≤–µ—Ç, ${user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã`;
    if (user.photo_url) {
        greeting.innerHTML += `<br><img src="${user.photo_url}" style="width:50px;height:50px;border-radius:50%;object-fit:cover;margin-top:10px;">`;
    }
} else {
    greeting.textContent = "–ü—Ä–∏–≤–µ—Ç! üëã";
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
sendBtn.addEventListener('click', async () => {
    try {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        const data = {
            action: "button_click",
            user_id: tg.initDataUnsafe?.user?.id || "anonymous",
            timestamp: new Date().toISOString(),
            platform: tg.platform
        };

        // UI feedback
        sendBtn.disabled = true;
        sendBtn.textContent = "–û—Ç–ø—Ä–∞–≤–∫–∞...";
        responseDiv.innerHTML = `
            <div class="notification">
                <p>‚åõ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...</p>
                <pre>${JSON.stringify(data, null, 2)}</pre>
            </div>
        `;

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        tg.sendData(JSON.stringify(data));
        
        // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        setTimeout(() => {
            responseDiv.innerHTML = `
                <div class="confirmation">
                    <p>‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</p>
                    <p>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</p>
                </div>
            `;
            sendBtn.disabled = false;
            sendBtn.textContent = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞";
        }, 500);

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
        responseDiv.innerHTML = `
            <div class="error">
                <p>‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>
                <p>${error.message}</p>
            </div>
        `;
        sendBtn.disabled = false;
        sendBtn.textContent = "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞";
    }
});

// –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
tg.MainButton.setText("–ó–∞–∫—Ä—ã—Ç—å").show();
tg.MainButton.onClick(() => {
    tg.showPopup({
        title: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
        message: "–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
        buttons: [
            {id: "close", type: "destructive", text: "–î–∞"},
            {type: "default", text: "–ù–µ—Ç"}
        ]
    }, (buttonId) => buttonId === "close" && tg.close());
});

// –°—Ç–∏–ª–∏
const style = document.createElement('style');
style.textContent = `
    .notification, .confirmation, .error {
        padding: 15px;
        border-radius: 10px;
        margin: 15px 0;
        animation: fadeIn 0.3s;
    }
    .notification { background: var(--tg-theme-secondary-bg-color); }
    .confirmation { background: #e8f5e9; color: #2e7d32; }
    .error { background: #ffebee; color: #c62828; }
    pre {
        background: var(--tg-theme-bg-color);
        padding: 10px;
        border-radius: 5px;
        overflow-x: auto;
        font-size: 14px;
    }
    #send-btn {
        transition: all 0.2s;
    }
    #send-btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }
    #send-btn:active {
        transform: scale(0.98);
    }
`;
document.head.appendChild(style);
