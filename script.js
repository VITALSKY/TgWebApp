// –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM fully loaded');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp API
    if (!window.Telegram || !window.Telegram.WebApp) {
        console.error('Telegram WebApp API not found!');
        showError('Telegram API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return;
    }
    
    const tg = window.Telegram.WebApp;
    const sendBtn = document.getElementById('send-btn');
    const greeting = document.getElementById('greeting');
    const responseDiv = document.getElementById('response') || document.createElement('div');
    if (!document.getElementById('response')) {
        document.body.appendChild(responseDiv);
        responseDiv.id = 'response';
    }
    
    if (!sendBtn || !greeting) {
        console.error('Essential elements not found!');
        return;
    }
    
    console.log('Telegram WebApp initialized:', tg);
    
    // –í–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    tg.expand();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π
    const user = tg.initDataUnsafe?.user || {};
    if (user.first_name) {
        greeting.innerHTML = `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! üëã`;
        if (user.photo_url) {
            greeting.innerHTML += `<br><img src="${user.photo_url}" 
                style="width: 50px; height: 50px; border-radius: 50%; margin-top: 10px; object-fit: cover;">`;
        }
    } else {
        greeting.textContent = "–ü—Ä–∏–≤–µ—Ç, –∞–Ω–æ–Ω–∏–º! üëã";
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ Telegram
    tg.MainButton.setText("–ó–∞–∫—Ä—ã—Ç—å").show();
    tg.MainButton.onClick(() => {
        tg.showPopup({
            title: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            message: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
            buttons: [
                {id: "close", type: "destructive", text: "–î–∞, –∑–∞–∫—Ä—ã—Ç—å"},
                {type: "default", text: "–û—Ç–º–µ–Ω–∞"}
            ]
        }, (buttonId) => {
            if (buttonId === "close") tg.close();
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    sendBtn.addEventListener('click', function() {
        console.log('Send button clicked');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
        sendBtn.style.transform = 'scale(0.95)';
        sendBtn.style.opacity = '0.8';
        setTimeout(() => {
            sendBtn.style.transform = '';
            sendBtn.style.opacity = '';
        }, 200);
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        sendBtn.disabled = true;
        sendBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const data = {
            action: 'button_click',
            user_id: user.id || 'anonymous',
            first_name: user.first_name || 'unknown',
            timestamp: new Date().toISOString(),
            platform: tg.platform
        };
        
        console.log('Prepared data:', data);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        responseDiv.innerHTML = `
            <div class="notification">
                <p>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...</p>
                <pre>${JSON.stringify(data, null, 2)}</pre>
            </div>
        `;
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            tg.sendData(JSON.stringify(data));
            console.log('Data sent successfully');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            setTimeout(() => {
                responseDiv.innerHTML += `
                    <div class="confirmation">
                        <p>‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</p>
                        <small>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...</small>
                    </div>
                `;
            }, 500);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º Mini App —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => tg.close(), 2000);
            
        } catch (error) {
            console.error('Error sending data:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            showAlert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            sendBtn.disabled = false;
            sendBtn.textContent = '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞';
        }
    });
    
    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showAlert(message, type = 'info') {
        const alert = document.createElement('div');
        alert.className = 'telegram-alert';
        
        const styles = {
            position: 'fixed',
            top: '20px',
            left: '50%',
            transform: 'translateX(-50%)',
            padding: '12px 24px',
            borderRadius: '25px',
            zIndex: '1000',
            animation: 'fadeIn 0.3s',
            backgroundColor: type === 'error' ? '#ff4444' : 
                          type === 'success' ? '#00C851' : '#33b5e5',
            color: 'white',
            boxShadow: '0 2px 10px rgba(0,0,0,0.2)'
        };
        
        Object.assign(alert.style, styles);
        alert.textContent = message;
        document.body.appendChild(alert);
        
        setTimeout(() => {
            alert.style.animation = 'fadeOut 0.3s';
            setTimeout(() => alert.remove(), 300);
        }, 3000);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
    function showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'telegram-error';
        errorDiv.style = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: #ff4444;
            color: white;
            padding: 15px;
            text-align: center;
            z-index: 1000;
        `;
        errorDiv.textContent = message;
        document.body.prepend(errorDiv);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    const style = document.createElement('style');
    style.textContent = `
        .notification {
            background: var(--tg-theme-secondary-bg-color);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            animation: fadeIn 0.3s ease;
        }
        .confirmation {
            background: var(--tg-theme-bg-color);
            border: 1px solid var(--tg-theme-button-color);
            padding: 10px;
            border-radius: 10px;
            margin-top: 10px;
            text-align: center;
        }
        pre {
            background: var(--tg-theme-bg-color);
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }
        #send-btn:active {
            transform: scale(0.95);
        }
        .telegram-alert {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            font-size: 14px;
        }
    `;
    document.head.appendChild(style);
});
